/*
 * This source file was generated by the Gradle 'init' task
 */
package com.osrs.toa

import com.osrs.toa.actors.GenericCombatEntity
import com.osrs.toa.actors.Player
import com.osrs.toa.actors.ToaCombatEntity
import com.osrs.toa.actors.DefaultCombatStats
import com.osrs.toa.actors.DefenceDrainCappedCombatStats
import com.osrs.toa.actors.ToaMonsterCombatStats
import com.osrs.toa.Health
import com.osrs.toa.sims.Zebak
import com.osrs.toa.sims.ZebakBoss
import com.osrs.toa.sims.ZebakMainFightStrategy
import com.osrs.toa.sims.ZebakConstants
import com.osrs.toa.sims.Baba
import com.osrs.toa.sims.BabaBoss
import com.osrs.toa.sims.BabaMainFightStrategy
import com.osrs.toa.sims.BabaConstants
import com.osrs.toa.weapons.Weapons
import com.osrs.toa.sims.Akkha
import com.osrs.toa.sims.AkkhaBoss
import com.osrs.toa.sims.AkkhaMainFightStrategy
import com.osrs.toa.sims.AkkhaConstants

fun main() {
    val iterations = 1
    
   // Simulate Zebak with Lightbearer
   val zebakLightbearerResults = simulateZebakFights(
       iterations = iterations,
       hasLightbearer = true,
       description = "with lightbearer"
   )

   // Simulate Zebak without Lightbearer
   val zebakNoLightbearerResults = simulateZebakFights(
       iterations = iterations,
       hasLightbearer = false,
       description = "without lightbearer"
   )

   // Simulate Baba with Lightbearer
   val babaLightbearerResults = simulateBabaFights(
       iterations = iterations,
       hasLightbearer = true,
       description = "with lightbearer"
   )
    
    // Simulate Baba with Ultor
    val babaUltorResults = simulateBabaFights(
        iterations = iterations,
        hasLightbearer = false,
        description = "with ultor"
    )
    
   // Simulate Akkha with Lightbearer
   val akkhaLightbearerResults = simulateAkkhaFights(
       iterations = iterations,
       hasLightbearer = true,
       description = "with lightbearer"
   )

   // Simulate Akkha with Magus Ring
   val akkhaMagusResults = simulateAkkhaFights(
       iterations = iterations,
       hasLightbearer = false,
       description = "with magus ring"
   )
    
   // Print results
   println("=== ZEBAK RESULTS ===")
   println("Average fight length vs zebak with lightbearer over $iterations iterations: ${zebakLightbearerResults.averageTicks}")
   println("Average fight length vs zebak without lightbearer over $iterations iterations: ${zebakNoLightbearerResults.averageTicks}")
    
    println("\n=== BABA RESULTS ===")
   println("Average fight length vs baba with lightbearer over $iterations iterations: ${babaLightbearerResults.averageTicks}")
    println("Average fight length vs baba with ultor over $iterations iterations: ${babaUltorResults.averageTicks}")
    
   println("\n=== AKKHA RESULTS ===")
   println("Average fight length vs akkha with lightbearer over $iterations iterations: ${akkhaLightbearerResults.averageTicks}")
   println("Average fight length vs akkha with magus ring over $iterations iterations: ${akkhaMagusResults.averageTicks}")
}

private data class SimulationResults(
    val totalTicks: Int,
    val iterations: Int,
    val averageTicks: Int
)

private fun simulateZebakFights(
    iterations: Int,
    hasLightbearer: Boolean,
    description: String
): SimulationResults {
    var totalTicks = 0
    
    repeat(iterations) { iteration ->
        val player = createPlayer(hasLightbearer)
        val zebakBoss = createZebakBoss()
        val loadout = createLoadout(player, zebakBoss)
        val monster = Zebak(loadout, zebakBoss)
        val simulator = CombatSimulator(player, monster)
        
        val fightLength = simulator.runSimulation()
        totalTicks += fightLength.value
        
        // Print final status for first few iterations
        if (iteration < 3) {
            println("\nFinal Status:")
            println("fight lasted ${fightLength.value} ticks")
        }
    }
    
    return SimulationResults(
        totalTicks = totalTicks,
        iterations = iterations,
        averageTicks = totalTicks / iterations
    )
}

private fun simulateBabaFights(
    iterations: Int,
    hasLightbearer: Boolean,
    description: String
): SimulationResults {
    var totalTicks = 0
    
    repeat(iterations) { iteration ->
        val player = createPlayer(hasLightbearer)
        val babaBoss = createBabaBoss()
        val loadout = createBabaLoadout(player, babaBoss)
        val monster = Baba(loadout, babaBoss)
        val simulator = CombatSimulator(player, monster)
        
        val fightLength = simulator.runSimulation()
        totalTicks += fightLength.value
        
        // Print final status for first few iterations
        if (iteration < 3) {
            println("\nFinal Status:")
            println("fight lasted ${fightLength.value} ticks")
        }
    }
    
    return SimulationResults(
        totalTicks = totalTicks,
        iterations = iterations,
        averageTicks = totalTicks / iterations
    )
}

private fun simulateAkkhaFights(
    iterations: Int,
    hasLightbearer: Boolean,
    description: String
): SimulationResults {
    var totalTicks = 0
    
    repeat(iterations) { iteration ->
        val player = createPlayer(hasLightbearer)
        val loadout = createAkkhaLoadout(player)
        val monster = Akkha(loadout, invocationLevel = 500, pathLevel = 2)
        val simulator = CombatSimulator(player, monster)
        
        val fightLength = simulator.runSimulation()
        totalTicks += fightLength.value
        
        // Print final status for first few iterations
        if (iteration < 3) {
            println("\nFinal Status:")
            println("fight lasted ${fightLength.value} ticks")
        }
    }
    
    return SimulationResults(
        totalTicks = totalTicks,
        iterations = iterations,
        averageTicks = totalTicks / iterations
    )
}

private fun createPlayer(hasLightbearer: Boolean): Player {
    return Player(
        GenericCombatEntity(
            health = Health(99),
            name = "Player",
            hasLightbearer = hasLightbearer
        )
    )
}

private fun createZebakBoss(): ZebakBoss {
    return ZebakBoss(ToaCombatEntity(
        name = "Zebak",
        baseHp = ZebakConstants.BASE_HP,
        invocationLevel = 500,
        pathLevel = 3,
        baseCombatStats = DefenceDrainCappedCombatStats(DefaultCombatStats(
            defenceLevel = 70,
            magicLevel = 100,
            meleeSlashDefenceBonus = 160,
            rangedDefenceBonus = 110,
            magicDefenceBonus = 200
        ), drainCap = 20)
    ))
}

private fun createLoadout(player: Player, zebakBoss: ZebakBoss): PlayerLoadout {
    return object : PlayerLoadout {
        override val player = player
        override val mainWeapon = Weapons.Zebak6WayTwistedBow
        override val strategy = ZebakMainFightStrategy(zebakBoss)
    }
}

private fun createBabaBoss(): BabaBoss {
    return BabaBoss(ToaCombatEntity(
        name = "Baba",
        baseHp = BabaConstants.BASE_HP,
        invocationLevel = 500,
        pathLevel = 0,
        baseCombatStats = DefenceDrainCappedCombatStats(DefaultCombatStats(
            defenceLevel = 70,
            magicLevel = 100,
            meleeSlashDefenceBonus = 160,
            rangedDefenceBonus = 110,
            magicDefenceBonus = 200
        ), drainCap = 20)
    ))
}

private fun createBabaLoadout(player: Player, babaBoss: BabaBoss,): PlayerLoadout {
    val weapon = if (player.hasLightbearer) Weapons.LightbearerFang else Weapons.UltorFang
    
    return object : PlayerLoadout {
        override val player = player
        override val mainWeapon = weapon
        override val strategy = BabaMainFightStrategy(babaBoss)
    }
}

private fun createAkkhaBoss(): AkkhaBoss {
    return AkkhaBoss(ToaCombatEntity(
        name = "Akkha",
        baseHp = AkkhaConstants.BASE_HP,
        invocationLevel = 500,
        pathLevel = 2,
        baseCombatStats = DefaultCombatStats(
            defenceLevel = 80,
            magicLevel = 100,
            rangedDefenceBonus = 60,
            rangedHeavyDefenceBonus = 60,
            magicDefenceBonus = 10
        )
    ), pathLevel = 2, invocationLevel = 500)
}

private fun createAkkhaLoadout(player: Player): PlayerLoadout {
    return object : PlayerLoadout {
        override val player = player
        override val mainWeapon = if (player.hasLightbearer) Weapons.TumekensShadow else Weapons.MagussShadow
        override val strategy = AkkhaMainFightStrategy(createAkkhaBoss())
    }
}
